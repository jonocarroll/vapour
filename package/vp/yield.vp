type roxy: list {
  yield: string
}

#' Yield
#'
#' Add yield to the roxygen2 documentation.
#'
#' @importFrom roxygen2 roclet roxy_tag_warning block_get_tags roclet_output
#' @importFrom roxygen2 roclet_process roxy_tag_parse rd_section roxy_tag_rd
#'
#' @import roxygen2
#'
#' @export
func roclet_yield() {
  return roclet("yield")
}

#' @export
func (x: rody_tag_yield) roxy_tag_parse(): any {
  let raw: char = gsub("\\n|\\t", "", x$raw)
  let yields: char = strsplit(raw, "\\|")[[1]]

  x$val = roxy(
    yield = yields |> trimws()
  )

  return x
}

#' @export
func (x: roxy_tag_yield) rody_tag_rd(base_path: char, env: any): any {
  rd_section("yield", x$val)
}

#' @export
func(x: rd_section_yield) format(...: any): char {
  let yield: char = paste0(x$value$yield, collapse = ", or ")
  return paste0(
    "\\yield{", yield, "}\n"
  )
}

#' @export
func (x: roclet_yield) roclet_process(blocks: any, env: any, base_path: char): list {
  let results: list = list()

  for (block in blocks) {
    let tags: any = block_get_tags(block, "yield")
    class(tags) = "list"
    results = append(results, list(x))
  }

  return results
}

#' @export
func (x: roclet_yield) roclet_output(results: any, base_path: char, ...: any): null {
  globals$yields = results
  return invisible(null)
}
